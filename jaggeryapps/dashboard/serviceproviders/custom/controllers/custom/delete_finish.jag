<%

var log = new Log();
var spClient = require('../custom/spAdminClient.jag');
var appManagementClient = require('/modules/appManagementClient.js').appManagementClient();
var appManagementIntegrationConfig = require('/conf/app_management_integration.json');

var i18n = session.get("i18n");
function deleteSP(){
    try{
        var cookie = session.get('auth-cookie');
        if(cookie == null){
            var cookie = request.getParameter("cookie");
            session.put('auth-cookie', cookie);
            var userName = request.getParameter("user");
            session.put("user",userName);
        }
        var spName = request.getParameter('applicationName');
        spClient.deleteApplication(spName);
    }catch(e){
        log.error(e);
        print(getErrorMessage(e.message));
    }
}

function deleteApp() {

    var publisher = new appManagementClient.Publisher(appManagementIntegrationConfig.restAPI);

    // Check whether there is an OAuth app registered for ReST API calls.
    // If not the publisher module will create one.
    var oauthApp = getOAuthAppForRestAPI();
    var applicationName = request.getParameter('applicationName');
    var version = "1.0";
    publisher.init(oauthApp);
    publisher.deleteApp(applicationName, version)
}

function getOAuthAppForRestAPI(){

    var createdServiceProviders = spClient.getAllCustomSPs().return;

    var oauthAppName = appManagementIntegrationConfig.restAPI.clientRegistration.clientName;
    var oauthAppExists = false;
    if (createdServiceProviders != null) {
        for (var i = 0; i < createdServiceProviders.length; i++) {
            if (createdServiceProviders[i].applicationName === oauthAppName) {
                oauthAppExists = true;
                break;
            }
        }
    }

    var oauthApp;
    if(oauthAppExists){
        oauthApp = spClient.getApplication(oauthAppName).return;
    }

    return oauthApp;
}

deleteSP();
deleteApp();
function getErrorMessage(message) {
    if (message != null && message.length > 0) {
        if (message.indexOf('401 Error: Unauthorized') > -1) {
            return '{"success":false, "reLogin":true}';
        } else {
            var msg = message.split(':');
            if (msg.length > 0) {
                return '{"success":false, "message":"' + msg[1] + '"}';
            }
        }
    }
    return '{"success":false, "message":null}';
}

%>