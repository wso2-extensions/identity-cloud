<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */
var log = new Log();
include("../controllers/wsUtil.jag");
var util = require("../util/utility.jag");

var serverUrl = util.getServerUrl();
var userStoreServerUrl = serverUrl + "/UserStoreConfigAdminService";
var tokenServerUrl = serverUrl + "/TokenMgtAdminService";
var ws = require('ws');
var webService = new ws.WSRequest();
var domain="is-wso2.com";
addUserStore();
addAccessToken();
function addUserStore(){

    try{
        var name = request.getParameter('name');
        var accessToken = request.getParameter('accessToken');
        var userAgentConf = getUserAgentConfig();

        var createUserStore = '<xsd:addUserStore xmlns:xsd ="http://org.apache.axis2/xsd" xmlns:xsd1="http://dto.configuration.store.user.identity.carbon.wso2.org/xsd">' +
                '<xsd:userStoreDTO>' +
                '<xsd1:className>org.wso2.carbon.identity.user.store.outbound.WSOutboundUserStoreManager</xsd1:className>' +
                '<xsd1:description>' + name + '</xsd1:description>' +
                '<xsd1:disabled>false</xsd1:disabled>' +
                '<xsd1:domainId>' + domain + '</xsd1:domainId>' +
                '<xsd1:properties>' +
                '<xsd1:name>MessageBrokerEndPointURL</xsd1:name>' +
                '<xsd1:value>' + userAgentConf.messageBrokerUrl + '</xsd1:value>' +
                '</xsd1:properties>' +
                '<xsd1:properties>' +
                '<xsd1:name>DirectoryName</xsd1:name>' +
                '<xsd1:value>' + name + '</xsd1:value>' +
                '</xsd1:properties>' +

                '<xsd1:properties>' +
                '<xsd1:name>MessageConsumeTimeout</xsd1:name>' +
                '<xsd1:value>' + userAgentConf.messageconsumetimeout + '</xsd1:value>' +
                '</xsd1:properties>' +

                '<xsd1:properties>' +
                '<xsd1:name>MessageLifetime</xsd1:name>' +
                '<xsd1:value>' + userAgentConf.messagelifetime + '</xsd1:value>' +
                '</xsd1:properties>' +

                '<xsd1:properties>' +
                '<xsd1:name>MessageRetryLimit</xsd1:name>' +
                '<xsd1:value>' + userAgentConf.messageretrylimit + '</xsd1:value>' +
                '</xsd1:properties>' +

                '</xsd:userStoreDTO>' +
                '</xsd:addUserStore>';

        webService = new ws.WSRequest();
        callWSInOnly(webService, userStoreServerUrl, "urn:addUserStore", createUserStore);

    }catch(e){
        log.error(e);
        print(getErrorMessage(e.message));

    }
}


function addAccessToken(){

    try{
        var name = request.getParameter('name');
        var domain = request.getParameter('domain');
        var accessToken = request.getParameter('accessToken');

        var addTokenPayload = '<xsd:insertAccessToken xmlns:xsd="http://org.apache.axis2/xsd">' +
                '<xsd:domain>'+ domain + '</xsd:domain>' +
                '<xsd:token>'+ accessToken + '</xsd:token>' +
                '</xsd:insertAccessToken>';
        webService = new ws.WSRequest();
        callWSInOnly(webService, tokenServerUrl, "urn:insertAccessToken", addTokenPayload);
        print('{"success":true}');

    }catch(e){
        log.error(e);
        print(getErrorMessage(e.message));

    }
}

function getUserAgentConfig() {
    var path = "/conf/user-agent.json";
    var file = new File(path);
    file.open("r");
    var json = "";

    json = file.readAll();
    file.close();
    var jsonConf = parse(json);
    return jsonConf;
};

function getErrorMessage(message) {
    if (message != null && message.length > 0) {
        if (message.indexOf('401 Error: Unauthorized') > -1) {
            return '{"success":false, "reLogin":true}';
        } else {
            var msg = message.split(':');
            if (msg.length > 0) {
                return '{"success":false, "message":"' + msg[1] + '"}';
            }
        }
    }
    return '{"success":false, "message":null}';
}

%>