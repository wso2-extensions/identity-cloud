<%

var userInfoClient = require('/controllers/login-logout/loggedUserInfoAdminClient.jag');
var authzFailure ;

include("/util/constants.jag");
var util = require("/util/utility.jag");
var loginClient = require('/controllers/login-logout/SAML2SSOAuthenticationClient.jag');
var carbon = require('carbon');

var i18n = util.initI18N();
var log = new Log();

//var filter = Packages.org.wso2.carbon.identity.user.saml.sso.SAML2SSOFilter;
//filter.handleSSO(request.getHttpServletRequest(), response.getHttpServletResponse(), application.get(SERVER_URL));

//var samlResponse = session.get(SAML_RESPONSE);
//var success = loginClient.login(samlResponse);


var samlConfig = application.get(SAML_PROPERTIES);

var samlResponse = request.getParameter('SAMLResponse'),
sessionId = session.getId(),
samlRequest = request.getParameter('SAMLRequest'),
relayState = request.getParameter('RelayState'),
sso = require('sso'),
samlRespObj,
keyStoreProps = {
    KEY_STORE_NAME: samlConfig['SAML.KeyStore'],
    KEY_STORE_PASSWORD: samlConfig['SAML.KeyStorePassword'],
    IDP_ALIAS: samlConfig['SAML.IdPCertAlias']
},
httpSessions = application.get('httpSessions');

if (!httpSessions) {
    application.put('httpSessions', {});
    httpSessions = application.get('httpSessions');
}




if (samlResponse != null) {
    samlRespObj = sso.client.getSamlObject(samlResponse);
    if (!sso.client.isLogoutResponse(samlRespObj)) {
        session.invalidate();
        session = request.getSession(true);
        sessionId = session.getId();

        // validating the signature
        if (samlConfig['SAML.EnableResponseSigning']) {

                var sessionObj = sso.client.decodeSAMLLoginResponse(samlRespObj, samlResponse, sessionId);
                if (sessionObj.sessionIndex != null || sessionObj.sessionIndex != 'undefined') {

                    // Storting the HTTP session against the session index, in application scope, to handle SLO.
                    httpSessions[sessionObj.sessionIndex] = session;

                    session.put(SESSION_PROPERTY_SESSION_INDEX, sessionObj.sessionIndex)
                    session.put(LOGGED_IN_USER, sessionObj.loggedInUser);
                    log.debug(sessionObj.loggedInUser);

                    var success = loginClient.login(samlResponse);
                    if(success === "true")
					{
					    var userInfo = userInfoClient.getUserInfo();
					    session.put(UI_USER_PERMISSIONS, userInfo.UIPermissionOfUser);
					    log.debug(userInfo.UIPermissionOfUser);
					    log.debug(session.get(LOGGED_IN_USER));

                        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
                        var tenantDomain = MultitenantUtils.getTenantDomain(sessionObj.loggedInUser);

                        var tenantId = carbon.server.tenantId({
                            domain: tenantDomain
                        });

                        //Add tenantId and tenantdomain into userInfo object.
                        userInfo.tenantId = tenantId;
                        userInfo.tenantDomain = tenantDomain;

                        //Set userInfo object in session.
                        session.put("userInfo", userInfo);

					    //create the header html for the user
					    var header = util.generateHeader(true, i18n);
					    
					    header = parse(stringify(header));
					    
					    session.put(USER_HEADER, header);

					    response.sendRedirect("index.jag");
                    } else if (success === NO_ADMIN_PERMISSION) {
                        response.sendRedirect("/admin/error/unauthorizedError.jag");
                    } else {
                        response.sendRedirect("/" + ADMIN_PORTAL_NAME + "/samlsso.jag?logout=true&authz_failure=true");
                    }

                }
        }

    } else {
        authzFailure = session.get(AUTHZ_FAILURE);
        session.invalidate();
        if (authzFailure != null) {
            response.sendRedirect("index.jag?authz_failure=" + authzFailure);
        } else {
            response.sendRedirect("index.jag");
        }
    }
}else if (samlRequest != null) {

    // This is an SLO request from the IDP.
    // Get the HTTP session object for the given session index, and invalidate it.

    log.info("SLO request received.")
    var index = sso.client.decodeSAMLLogoutRequest(sso.client.getSamlObject(samlRequest));

    log.info("Session index of the SLO request is " + index);

    var httpSessionForSessionIndex = application.get('httpSessions')[index];

    if(httpSessionForSessionIndex){
        log.info("Invalidating http session for the session index " + index);
        httpSessionForSessionIndex.invalidate();
        delete application.get('httpSessions')[index];
    }
}
%>
